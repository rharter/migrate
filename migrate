#!/usr/bin/ruby -w
$LOAD_PATH.unshift( File.join( File.dirname(__FILE__), 'lib' ) )

require 'RTL'

# Settings
@output_file = './schema.sql'
@directory = './'
@template_file = './template.rtl'

#
# Main runloop of the app.  This is called after processing 
# of the arguments.
#
def main
  
  # Load the config
  puts ''
  puts "Loading rtl file: #{@template_file}"
  begin
    template = RTL.load_file(@template_file) unless defined? TEMPLATE
  rescue Exception => e
    puts red "Failed to load file: " + $!
    exit 1
  end
  puts green "Success\n"
  
  # Load files into array
  puts "Searching for migrations in directory: #{@directory}"
  begin
    migrations = []
    sql_files = File.join @directory, '*.sql'
    Dir.glob(sql_files) do |f|
      if File.basename(f, ".sql") == File.basename(@output_file, ".sql")
        next
      end
      puts blue "Adding migration: #{f}"
      migrations.push f
    end
  rescue Exception => e
    puts red "Failed to load migrations: " + $!
    exit 1
  end
  
  if migrations.length == 0
    puts red "No migrations found!"
    exit 1
  end
  puts green "Found #{migrations.length} migration files.\n"
  
  # Check if the output exists, moving it if not
  if File.exists? @output_file
    new_name = @output_file + ".old"
    File.rename(@output_file, new_name)
  end
  
  # Iterate files in order, writing 
  # contents to output using template
  file = File.new @output_file, 'w+'
  
  # Write the header comment
  date = Time.now
  file.puts eval('"' + template['header'] + '"')
  file.puts ''
  
  # Write the schema table generation code
  file.puts template['schema_table']
  file.puts ''
  
  # Iterate migrations and add them to the script
  migrations.each do |m|
    f = File.new m, 'r'
    migration = template['migration']
    
    # Set up the local variables for the template substitution
    name = File.basename m, ".sql"
    content = ''
    while line = f.gets
      content += line
    end
    
    # Evaluate the string to offer variable substitution
    schema_table_insert = eval('"' + template['schema_table_insert'] + '"')
    migration = eval('"' + migration + '"')
    
    file.puts "\n"
    file.puts migration
    file.puts "\n"
    
    puts "Wrote migration #{m} to #{@output_file}"
  end
  
  puts green "Schema compiled to script: #{@output_file}"
end

def version
  'migrate v1.0 by Ryan Harter <ryan.harter@lextech.com>'
end

def print_usage
  puts version
  puts ''
  puts 'Generates SQL scripts from migration files.'
  puts ''
  puts 'Usage:'
  puts '  migrate [-v] [-h] [-c <name>] [-d <path>] [-f <name>] [-t <path>]'
  puts ''
  puts 'Options:'
  puts '  -c <name>, --create <name>    Create a new migration file using the'
  puts '                                name provided. (Not Implemented Yet)'
  puts '  -f <name>, --file <name>      The name of the file to write the master'
  puts '                                Schema [Default: ./schema.sql]'
  puts '  -d <path>, --directory <path> The location of the migration files to'
  puts '                                process [Default: ./]'
  puts '  -t <path>, --template <path>  Use to specify the location of the template'
  puts '                                file. [Default: ./template.rtl]'
  puts '  -v, --version                 Displays script version information'
  puts '  -h, --help                    Print this help text'
end

# Helpers
def colorize(text, color_code)
  "\e[#{color_code}m#{text}\e[0m"
end
def red(text); colorize(text, 31); end
def green(text); colorize(text, 32); end
def blue(text); colorize(text, 34); end


#
# Main Entry
#

# Process arguments
@set_file = false
@set_directory = false
@set_template = false

@do_version = false
@do_help = false

if ARGV.length != 0
  ARGV.each do |a|
    case a
    when '-f', '--file'
      @set_file = true
    when '-d', '--directory'
      @set_directory = true
    when  '-t', '--template'
      @set_template = true
    when '-v', '--version'
      puts version
      exit 0
    when '-h', '--help'
      print_usage
      exit 0
    else
      if @set_file
        @output_file = "#{a}"
        @set_file = false
      elsif @set_directory
        @directory = "#{a}"
        @set_directory = false
      elsif @set_template
        @template_file = "#{a}"
        @set_template = false
      else
        puts "Error: Unknown option '#{a}'"
        print_usage
        exit 1
      end
    end
  end
end

main